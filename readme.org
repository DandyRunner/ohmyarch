There are several methods to install Arch Linux. This document describes a method a minimum version of Arch Linux. I try to refrain from installing large bundles and restrict to installing software that I need. The main driver is to learn more about Linux in the first place, and second to install less software yet do more.

This file can be used to install my version of Arch linux by tangling this file (org-bable-tanlge) and then run the output as sudo. Anarchy must be installed and the network must be up.
* Install Arch
** Ananarchy 
Likely the easiest way to install Arch Linux is with the excellent Anarchy image. It is a prompt driven install, just the next level up from installing 'manually' It really shouldn't need much of an explanation, as the options presented are straight forward if you are familiar with Linux.
- Select no windows manager
- Select no software
- Select no graphical start environment
** Connect to the wireless network
You will have to connect to the internet. Assuming you are using wireless, use the NetworkManager tool to connect to WiFi (or wired).
#+BEGIN_SRC bash
nmcli device wifi list
nmcli device wifi connect SSID password PASSWORD
#+END_SRC
** First packages to get going
So now we are connected, we need some basic packages to install repositories, our dotfiles, etc.
#+BEGIN_SRC bash :tangle yes
echo "Development tools install"
pacman --noconfirm -S base-devel       # Development tools
pacman --noconfirm -S git              # Git version management
pacman --noconfirm -S rsync            # File synchronisation
#+END_SRC
** User Directories 
Install common default user directories.
#+BEGIN_SRC bash :tangle yes
echo "XDG utilities install"
pacman --noconfirm -S xdg-user-dirs
pacman --noconfirm -S xdg-utils
xdg-user-dirs-update
#+END_SRC
** File types and mime
Associate programs to file types
#+BEGIN_SRC bash :tangle yes
#+END_SRC
The utilities included provide:
#+BEGIN_SRC bash :tangle no
xdg-open <file>                       # Open a file and mime used to select apps
xdg-mime query filetype <file>        # What file type is it
xdg-mime query default <type>         # What app opens type
xdg-mime default <app.desktop> <type> # Change the default app 
#+END_SRC
** Clone the dotfiles from the repository to kick-start upcoming software
As we install packages we have the option of configuring them as required, or we can borrow some dotfiles (applications configurations from others). I have created my own dotfiles and required to be set up as follows:
#+BEGIN_SRC bash
alias='dotfiles='git --git-dir=$HOME/.dotfiles.git/ --work-tree=$HOME'
git clone --recursive --separate-git-dir=$HOME/.dotfiles.git https://github.com/dandyrunner/dotfiles.git /tmp/dotfiles
rsync -rvl --exclude ".git" /tmp/dotfiles/ $HOME/
rm -r /tmp/dotfiles
dotfiles submodule update --init --recursive $HOME
dotfiles status-showUntrackedFiles=no
dotfiles config alias.untracked "status -u ."
dotfiles config alias.untracked-at "status -u"
#+END_SRC
** Time to reboot
Upon reboot the system will pickup on the new dotfiles.
** Installing the AUR
The AUR provides many additional software packages not directly available on standard Arch.
Note the below instructions will likely pull in the 'go' package (large)
#+BEGIN_SRC bash :tangle yes
echo "Yay install"
cd /opt
git clone https://aur.archlinux.org/yay-git.git
chown -R ejansen:ejansen yay-git/
cd yay-git
makepkg -si
#+END_SRC

#+RESULTS:

** Installing core Tools
You might have noticed we are still working in a terminal environment. and why not, there is much that can be done from here. This section has a number of excellent terminal based tools that you will want to have at your finger tips.
*** Fonts first
#+BEGIN_SRC bash
yay -S nerd-fonts-source-code-pro
#+END_SRC
*** File Manager
There are many nice terminal file managers available. Some are very complete and all inclusive (like 'ranger'), others are very bare bone with very little opportunity to customise to your liking or workflow (like 'nnn' or 'fff'). I have chosen for 'lf' which sit just in between complete but ate the same time change to your liking. Also fast.
**** lf
A lightweight file manager. Very fast, but very limited in features, unlike *Ranger* which has basically everything pre-installed. But lf is more fun, as you can determine the features you need or like.
#+BEGIN_SRC bash tangle=no
yay -S lf
#+END_SRC
Some of the features I prefer to be added are installed as follows:
#+BEGIN_SRC bash
yay -S pistol-git      # Many Previews
yay -S chafa           # Image preview in the terminal
yay -S highlight       # For many types of markdown texts
yay -S glow            # For other markdowns
#+END_SRC
*** Bash-it
Some excellent extension to the bash environment, with a community driven development for bash aliases, scripts and auto completions.
#+BEGIN_SRC bash
cd ~
yay -S bash-it
~/.bash-it/install.sh 
#+END_SRC
*** Finding files
The Linux system, of course, has some excellent tools to locate files. Most tools are present from core, but the locate tool needs to be installed.
#+BEGIN_SRC bash
yay -S mlocate
#+END_SRC
Now you can use tools such as:
#+BEGIN_SRC bash
updatedb               # Update the file index
locate                 # Find files that contain
whereis                # Find that executable
#+END_SRC
* Install a Graphical Environment
This is a continues changing area. 
At the moment I am working with Suckles software to see what it is all about.
** Hardware Drivers
You likely want to install some drivers for the hardware, as most wont work with a bare bone Arch install.
*** Video
First figure out what hardware you have onboard:
#+BEGIN_SRC bash
lspci | grep -e VGA -e 3D
#+END_SRC
#+RESULTS:
: 00:02.0 VGA compatible controller: Intel Corporation HD Graphics 620 (rev 02)

Now search for the correct driver in the package manager:
#+BEGIN_SRC bash
pacman -Ss xf86-video
#+END_SRC

#+RESULTS:
| extra/xf86-video-amdgpu     | 19.1.0-2                   | (xorg-drivers)            |              |             |        |        |       |
| X.org                       | amdgpu                     | video                     | driver       |             |        |        |       |
| extra/xf86-video-ati        | 1:19.1.0-2                 | (xorg-drivers)            |              |             |        |        |       |
| X.org                       | ati                        | video                     | driver       |             |        |        |       |
| extra/xf86-video-dummy      | 0.3.8-4                    | (xorg-drivers)            |              |             |        |        |       |
| X.org                       | dummy                      | video                     | driver       |             |        |        |       |
| extra/xf86-video-fbdev      | 0.5.0-2                    | (xorg-drivers)            |              |             |        |        |       |
| X.org                       | framebuffer                | video                     | driver       |             |        |        |       |
| extra/xf86-video-intel      | 1:2.99.917+908+g7181c5a4-1 | (xorg-drivers)            |              |             |        |        |       |
| X.org                       | Intel                      | i810/i830/i915/945G/G965+ | video        | drivers     |        |        |       |
| extra/xf86-video-nouveau    | 1.0.16-2                   | (xorg-drivers)            |              |             |        |        |       |
| Open                        | Source                     | 3D                        | acceleration | driver      | for    | nVidia | cards |
| extra/xf86-video-openchrome | 0.6.0-4                    | (xorg-drivers)            |              |             |        |        |       |
| X.Org                       | Openchrome                 | drivers                   |              |             |        |        |       |
| extra/xf86-video-sisusb     | 0.9.7-3                    |                           |              |             |        |        |       |
| X.org                       | SiS                        | USB                       | video        | driver      |        |        |       |
| extra/xf86-video-vesa       | 2.4.0-3                    | (xorg-drivers             | xorg)        | [installed] |        |        |       |
| X.org                       | vesa                       | video                     | driver       |             |        |        |       |
| extra/xf86-video-vmware     | 13.3.0-2                   | (xorg-drivers)            |              |             |        |        |       |
| X.org                       | vmware                     | video                     | driver       |             |        |        |       |
| extra/xf86-video-voodoo     | 1.2.5-11                   | (xorg-drivers)            |              |             |        |        |       |
| X.org                       | 3dfx                       | Voodoo1/Voodoo2           | 2D           | video       | driver |        |       |
| community/xf86-video-qxl    | 0.1.5-7                    | (xorg-drivers)            |              |             |        |        |       |
| Xorg                        | X11                        | qxl                       | video        | driver      |        |        |       |

Now install the correct driver with
#+BEGIN_SRC bash
sudo pacman -S xf86-video-intel
#+END_SRC
*** Audio
Different options available for Audio, but the standard is 'Alsa' Advanced Linux Sound System.
**** Alsa
Although likely already installed, if some parts are missing or not working, the following will install:
#+BEGIN_SRC bash
sudo pacman -S alsa-utils
#+END_SRC
If for whatever reason the audio is not working / activating, try this
#+BEGIN_SRC bash
sudo pacman -Qs alsa-utils
sudo pacman -S alsa-utils
#+END_SRC
** X
First install the graphical X environment and dependencies
#+BEGIN_SRC bash
#sudo pacman -S xorg             # Provides the entire Xorg environment
sudo pacman -S xorg-server
sudo pacman -S xorg-xinit       # Provides xinit and startx
sudo pacman -S xorg-xmodmap     # Provieds for remapping the Ctrl and Caps keys
#sudo pacman -S libxft           # FreeType font drawing library for X
#sudo pacman -S libx11           # X11 client side library
#sudo pacman -S libxinerama
#+END_SRC
** Notifications
Once X is initialised and the Windows manager is running, one cnaobtain notifications from applications - like email - when events occur. The standard package is 'libnotofy', but there is a more advanced package available (from the suckles family) called 'dunst'. Lets install:
#+BEGIN_SRC bash
yay -S dunst
#+END_SRC
You can test the function of the notification system with a test such as this:
#+BEGIN_SRC bash tangle no
notify-send 'Hello world!' 'This is an example notification.' --icon=dialog-information
#+END_SRC
** BSPWM Tiling Windows Manager
At the moment I like this tiling windows manager best as it has a very nice separation of responsibilities.
To obtain a complete environment, you require three packages with 1) a windows manager 2) a keyboard handler and 3) a status bar (if you wish)
Note: polybar requires the Python libraries to be installed.
Install with the following:
#+BEGIN_SRC bash
yay -S bspwm
yay -S xshkd
yay -S polybar
yay -S alacritty
yay -S pacman-contrib
#+END_SRC
I further use the suckles application dmenu, for application selection.
#+BEGIN_SRC bash
git clone git://git.suckless.org/dmenu
cd dmenu
sudo make clean install
#+END_SRC
A strategy is:
1. Master always hard set to origin
2. branch with pach
3. Merge patch back in master and build
4. Good sample: https://www.youtube.com/watch?v=UEmPboaTDpQ
#+BEGIN_SRC bash
make clean && rm -f config.h && git reset --hard origin/master
#+END_SRC

** DWM Tiling Windows Manager
Install with the following:
$ cd ~
$ mkdir Repos
$ cd Repos
$ git clone https://github.com/dandyrunner/dwm
$ cd dwm
$ sudo make clean install

You will need to have the correct terminal installed - or nothing but black screen will greet you
$ cd ~/Repos
$ git clone https://github.com/dandyrunner/st
$ cd st
$ sudo make clean install

And really, you would need a way to fire up those apps that you don;t have key bindings for
$ cd ~/Repos
$ git clone https://github.com/dandyrunner/dmenu
$ cd dmenu
$ subo make clean install

Ready to fire up the system, and enjoy.
$ startx
      
* Package Installation and Configuration
** Screensaver
Just in case you forget to logoff or logout your system, install a safety option with screensaver. It has the coolest "The Matrix" option via the theme xmatrix (standalone known as cmatrix)
#+BEGIN_SRC bash
yay -S xscreensaver
#+END_SRC
The to configure and select the xmatrix theme, run:
#+BEGIN_SRC bash
xscreensaver &
xscreensaver-demo
#+END_SRC
Install it as a service bu creating the xscreensaver.service file in ~/.config/systemd/user/
#+BEGIN_SRC 
[Unit]
Description=XScreenSaver
[Service]
ExecStart=xscreensaver
[Install]
WantedBy=default.target
#+END_SRC
And start it with
#+BEGIN_SRC bash
systemctl --user enable xscreensaver
systemctl --user start xscreensaver
#+END_SRC
** Editor
*** Editor - Emacs - Really what else
This is a chapter by itself. Emacs is many things beside a reasonable text editor. Yes, vim is fast, by Emacs has some real cool features not seen anywhere else, and that is the reason I install it:
1. Org-mode - the best way to get organised
2. Magit    - the best way to interact with git
Heaps of other features too, but I leave that for later explorations
I use a configuration called Doom from Hissnler. Really, in the end that's what you want (but try if you like)
#+BEGIN_SRC bash
$ sudo pacman -S emacs
$ git clone --depth 1 https://github.com/hlissner/doom-emacs ~/.emacs.d
$ ~/.emacs/doom/bin install
#+END_SRC
There are a few supporting tools that need to be installed tp make Emacs work well, including a spelling checker and search feature.
#+BEGIN_SRC bash
$ sudo pacman -S aspell
$ sudo pacman -S aspell-en
$ sudo pacman -S deft
#+END_SRC
And finally after checking that all is running, start Emacs as a daemon.
#+BEGIN_SRC bash
systemctl --user enable --now emacs
#+END_SRC
Now you can connect to the daemon with:
#+BEGIN_SRC bash
emacsclient -nc       # Emacs -no wait -new frame graphical
emacsclient -t        # Emacs in the terminal
emacsclient -a "" -t  # As repsonse to git and mutt
#+END_SRC
And then there is the issue with speed and color. No doubt the terminal version of emacsclient is a ton faster than the graphical environment, and if you wish to have the snappy repsonse you might be ised to with vim, the terminal is the way to go.
Running emacs in terminal mode will likely give you funny/strange colors. One way around it is to set the environment TERM=xterm-256color. If you set the environment with an export permanently, emacs is slow opening files for unknow reasons (yet). Hence, I set it once then reset it again.
#+BEGIN_SRC bash
TERM=xterm-256color emacsclient
#+END_SRC
If you alacritty, then the TERM variable can be set in the config file.
*** Editor - Neovim installation
Neovim has some Plug-ins configured that require python to be installed and enabled
$ sudo python -m ensurepip --upgrade
$ python3 -m pip install --user --upgrade pynvim
$ sudo pacman -S fontconfig
$ sudo pacman -S powerline-fonts
** Email
There are a few email applications out there, but mutt has been there since the beginning and neomutt is a fork of this already excellent application, actively worked on today. Following the Linux philosophy, you will need a few applications to receive mail, send mail, look at mail, and decode some mail formats.

Install the following apps:
#+BEGIN_SRC bash
sudo pacman -S neomutt        # A email client
sudo pacman -S isync          # Imap and MailDir mailbox synchronizer
sudo pacman -S msmtp          # Send email
sudo pacman -S pass           # Store your password(s) safely
sudo pacman -S lynx           # View html emails
sudo pacman -S notmuch        # Index and search email real fast
sudo pacman -S libnotify      # Get notified of emails arriving on synchronisation
sudo pacman -S abook          # Address book - terminal based of course
sudo pacman -S w3m            # Be able to see html emails
#+END_SRC

That was the easy part, now it's time to configure the tools.
1. Ensure you have your password set up. This can be done by creating a gpg key and account entry.
#+BEGIN_SRC bash
gpg --full-key-gen            # Generate a gpg key pair
gpg insert email/<email@m.com # Create a password for the email
#+END_SRC
2. Create a directory for your mail box
#+BEGIN_SRC bash
mkdir ~/.local/shared/mail/<account>
#+END_SRC
3. Set up your configuration file for mbsync, call ~/.mbsyncrc
4. Sync your email for the first time
#+BEGIN_SRC bash
mbsync -a
#+END_SRC
** Browser - Brave
A browser based on chrome, but without the peeking options build in.
Note this package installs a number of fonts and themes.
#+BEGIN_SRC bash
yay -S brave
#+END_SRC
** iPhone
To connect your i-device and get access to photos , videos and other documents, there is some wok to be done. First install the following packages:
#+BEGIN_SRC bash
yay -S libimobiledevice          # Speak i-device
yay -S ifuse                     # Mounting utility from the AUR
#+END_SRC
After installing the above to utils, check that the usbmuxd.service started automatically (installed wirh libmobiledevice).
#+BEGIN_SRC bash
systemctl status usbmuxd.service
#+END_SRC
Next we need to pair device. Make sure the device is logged into -or better unlocked.
From here has to be repeated every time you reconnect the iphone.
#+BEGIN_SRC bash
idevicepair pair
#+END_SRC
The above should be succesfull, annd now we can mount the device to access the file system (or a portion of it).
#+BEGIN_SRC bash
ifuse ~/iphone
#ifuse -o allow_other ~/iphone
#+END_SRC
I use an iphone folder in my home folder.
** Redshift
A tool needed if you want to catch any sleep. This background tool drops the blue colors from the terminal once evening sets in, ensuring you will get sleepy with the red-ish colors. To install:
#+BEGIN_SRC bash
yay -S redshift
#+END_SRC
To run the tool you need this:
#+BEGIN_SRC bash
redshift -l -37.814:144.96332
#+END_SRC
where the lattitude:longitude can be obtained from geonames.org.
**
** Lazygit
Nice tool to work with the git environment, and allows me to forget about all the functions that git requires.
To install:
#+BEGIN_SRC bash
yay -S lazygit
#+END_SRC
** Docker
Needless to say, docker provides a clean 'vm' environment for various services to try or use, without the overhead of a virtual machine.
Complete the following for the install of Docker:
#+BEGIN_SRC bash
yay -S docker                    : install the docker package
systemctl enable docker.service  : enable the docker service
systemctl start docker.service   : start the docker service
sudo docker info                 : confirm docker is installed and operational -> fails
#+END_SRC
Note that the above docker info only returns if run as sudo.
#+BEGIN_SRC bash
gpasswd -a <user> docker        : add user to the docker group
bash_it enable alias docker     : enable docker aliases dk*
bash_it enable completion docker: enable docker completion
docker info
#+END_SRC
Some usefull commands for the command line
#+BEGIN_SRC bash
docker info                     : list overview of various docker status
docker ps                       : list containers running
docker images                   : list images
#+END_SRC
** File and directory info
A small thing but more pleasant to look at and some additonal git status information thrown in.
Replaces with an alias the la and ll commmands.
#+BEGIN_SRC bash
yay -S exa
#+END_SRC
** Find files and directories
An improved 'find' function with fd
#+BEGIN_SRC bash
yay -S fd
#+END_SRC
** System Info
A nice graphical representation of system usage making advantage of go.
#+BEGIN_SRC bash
yay -S gotop
#+END_SRC
** Nicer ping
Pretty ping command with graph like response times
#+BEGIN_SRC bash
yay -S prettyping
#+END_SRC
** Virtual Machines
*** Qemu
A much smal application that install withing seconds and really doesn't require much more than it provides out of the box.
The ovmf package is required to install arch iso's (or others) with UEFI.
The ovmf is found in /usr/share/ovmf/OVMF_CODE.fd which is pointed in qemy to the firmware.
#+BEGIN_SRC bash
yay -S qemu aqemu ovmf
#+END_SRC

* Thinks to try
** Streaming
There are a few packages available supporting streaming, including:
- [ ] Peerflix               : streaming from a torrent magnet to a destination - works
- [ ] Castnow                : stream to a google chromecast (not LG)
- [ ] Dlnacast               : stream to a smart device (including LG)
- [ ] Universal Media Server : appears interesting
