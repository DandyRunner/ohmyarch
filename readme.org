There are several methods to install Arch Linux. This document describes a method a minimum version of Arch Linux. I try to refrain from installing large bundles and restrict to installing software that I need. The main driver is to learn more about Linx in the first place, and second to install less software yet do more.
* Install Arch
** Ananarchy 
Likely the easiest way to install Arch Linux is with the excellent Anarchy image. It is a prompt driven install, just the enxt level up from installing 'manually' It really shouldn't need much of an explanation, as the options presented are straight forward if you are familiar with Linux.
- Select no windows manager
- Select no software
- Select no graphical start environment
** Connect to the wireless network
You will have to connect to the internet. Assuming you are using wireless, use the NetworkManager tool to connect to wifi (or wired).
#+BEGIN_SRC bash
$ nmcli device wifi list
$ nmcli device wifi connect SSID password PASSWORD
#+END_SRC
** First packages to get going
So now we are connected, we need some basic packages to install repositiores, our dotfiles, etc.
#+BEGIN_SRC bash
$ sudo pacman -S git              # Git version management 
$ sudo pacman -S rsync            # File synchronisation
$ sudo pacman -S xorg-xmodmap     # Provieds for remapping the Ctrl and Caps keys
#+END_SRC
** User Directories 
Install common default user directories.
#+BEGIN_SRC bash
$ yay -S xdg-user-dirs
$ xdg-user-dirs-update
#+END_SRC
** Clone the dotfiles from the repository to kick-start upcoming software
As we install packages we have the option of configuring them as required, or we can borrow some dotfiles (applications configurations from others). I have created my own dotfiles and required to be set up as follows:
#+BEGIN_SRC bash
$ alias='dotfiles='git --git-dir=$HOME/.dotfiles.git/ --work-tree=$HOME'
$ git clone --recursive --separate-git-dir=$HOME/.dotfiles.git https://github.com/dandyrunner/dotfiles.git /tmp/dotfiles
$ rsync -rvl --exclude ".git" /tmp/dotfiles/ $HOME/
$ rm -r /tmp/dotfiles
$ dotfiles submodule update --init --recursive $HOME
$ dotfiles status-showUntrackedFiles=no
$ dotfiles config alias.untracked "status -u ."
$ dotfiles config alias.untracked-at "status -u"
#+END_SRC
** Time to reboot
Upon reboot the system will pickup on the new dotfiles.
** Installing the AUR
The AUR provides many additional software packages not directly available on standard Arch.
Note the below instructions will likely pull in the 'go' package (large)
#+BEGIN_SRC bash
$ cd /opt
$ sudo git clone https://aur.archlinux.org/yay-git.git
$ sudo chown -R ejansen:ejansen yay-git/
$ cd yay-git
$ makepkg -si
#+END_SRC
** Installing core Tools
You might have noticed we are still working in a terminal environment. and why not, there is much that can be done from here. This section has a number of excellent terminal based tools that you will want to have at your finger tips.
*** File Manager
**** ELF
A lightweight file manager. Very fast, but very limited in features, unlike *Ranger* which has basically everything pre-installed. But lf is more fun, as you can determine the features you need or like.
#+BEGIN_SRC bash
$ yay -S lf
#+END_SRC
Some of the features I prefer to added are installed as follows:
#+BEGIN_SRC bash
$ yay -S pistol          # Many Previews
$ yay -S chafa           # Image preview in the terminal
#+END_SRC
* Install a Graphical Environemnt
This is a continues changing area. 
At the moment I am working with Suckless software to see what it is all about.
** X 
First install the gaphical X environment and dependencies
$ sudo pacman -S xorg
$ sudo pacman -S libxft
$ sudo pacman -S libx11
$ sudo pacman -S libxinerama
** Dynamic Window Manager
Install with the following:
$ cd ~
$ mkdir Repos
$ cd Repos
$ git clone https://github.com/dandyrunner/dwm
$ cd dwm
$ sudo make clean install

You will need to have the correct terminal installed - or nothing buta black screen will greet you
$ cd ~/Repos
$ git clone https://github.com/dandyrunner/st
$ cd st
$ sudo make clean install

And realy, you would need a way to fire up those apps that you don;t have key bindings for
$ cd ~/Repos
$ git clone https://github.com/dandyrunner/dmenu
$ cd dmenu
$ subo make clean install

Ready to fire up the system, and enjoy.
$ startx
      
* Package Installation and Configuration
** Editor
*** Editor - Emacs - Really what else
This is a chapter by itself. Emacs is many things beside a reasonable text exditor. Yes, vim is fast, by emacs has some real cool features not seen anywhere else, and that is the reason I install it:
1. Org-mode - the best way to get organised
2. Magit    - the best way to interact with git
Heaps of other features too, but I leave that for later explorations
I use a configuration called Doom from Hissnler. Realy, in the end thats what you want (but try if you like)
#+BEGIN_SRC bash
$ sudo pacman -S emacs
$ git clone --depth 1 https://github.com/hlissner/doom-emacs ~/.emacs.d
$ ~/.emacs/doom/bin install
#+END_SRC
There are a few supporting tools that need to be installed tp make Emacs work well, including a spelling checker and search feature.
#+BEGIN_SRC bash
$ sudo pacman -S aspell
$ sudo pacman -S aspell-en
$ sudo pacman -S deft
#+END_SRC

*** Editor - Neovim installation
Neovim has some Plug-ins configured that require python to be installed and enabled
$ sudo python -m ensurepip --upgrade
$ python3 -m pip install --user --upgrade pynvim
$ sudo pacman -S fontconfig
$ sudo pacman -S powerline-fonts
** File Browser
$ yay -S lf
$ yay -S pistol-git
** Browser - Brave
A browser based on chrome, but without the peeking options build in.
Note this package installs a number of fonts and themes.
$ yay -S brave
